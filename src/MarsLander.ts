import { MARS_GRAVITY } from "./config"
import { Position } from "./types"

const cos = [
  0.0, 0.0174524064372836, 0.03489949670250108, 0.052335956242943966,
  0.06975647374412523, 0.08715574274765836, 0.10452846326765346,
  0.12186934340514749, 0.13917310096006547, 0.15643446504023092,
  0.17364817766693041, 0.19080899537654492, 0.20791169081775923,
  0.22495105434386514, 0.24192189559966767, 0.25881904510252074,
  0.27563735581699916, 0.29237170472273677, 0.30901699437494745,
  0.32556815445715676, 0.3420201433256688, 0.35836794954530016,
  0.3746065934159122, 0.3907311284892737, 0.4067366430758004,
  0.42261826174069944, 0.43837114678907746, 0.45399049973954686,
  0.46947156278589086, 0.4848096202463371, 0.5000000000000001,
  0.5150380749100544, 0.5299192642332049, 0.5446390350150272,
  0.5591929034707468, 0.573576436351046, 0.5877852522924731, 0.6018150231520483,
  0.6156614753256583, 0.6293203910498375, 0.6427876096865394,
  0.6560590289905074, 0.6691306063588582, 0.6819983600624985,
  0.6946583704589974, 0.7071067811865476, 0.7193398003386512,
  0.7313537016191705, 0.7431448254773942, 0.754709580222772, 0.766044443118978,
  0.7771459614569708, 0.7880107536067219, 0.7986355100472928,
  0.8090169943749475, 0.8191520442889918, 0.8290375725550417, 0.838670567945424,
  0.848048096156426, 0.8571673007021123, 0.8660254037844387, 0.8746197071393957,
  0.882947592858927, 0.8910065241883679, 0.898794046299167, 0.9063077870366499,
  0.9135454576426009, 0.9205048534524404, 0.9271838545667874,
  0.9335804264972017, 0.9396926207859084, 0.9455185755993168,
  0.9510565162951535, 0.9563047559630355, 0.9612616959383189,
  0.9659258262890683, 0.9702957262759965, 0.9743700647852352,
  0.9781476007338057, 0.981627183447664, 0.984807753012208, 0.9876883405951378,
  0.9902680687415704, 0.992546151641322, 0.9945218953682733, 0.9961946980917455,
  0.9975640502598242, 0.9986295347545738, 0.9993908270190958,
  0.9998476951563913, 1.0,
]
const sin = [
  1.0, 0.9998476951563913, 0.9993908270190958, 0.9986295347545738,
  0.9975640502598242, 0.9961946980917455, 0.9945218953682733, 0.992546151641322,
  0.9902680687415704, 0.9876883405951378, 0.984807753012208, 0.981627183447664,
  0.9781476007338057, 0.9743700647852352, 0.9702957262759965,
  0.9659258262890683, 0.9612616959383189, 0.9563047559630354,
  0.9510565162951535, 0.9455185755993167, 0.9396926207859083,
  0.9335804264972017, 0.9271838545667873, 0.9205048534524404,
  0.9135454576426009, 0.9063077870366499, 0.898794046299167, 0.8910065241883678,
  0.8829475928589269, 0.8746197071393957, 0.8660254037844386,
  0.8571673007021122, 0.8480480961564261, 0.8386705679454239,
  0.8290375725550417, 0.8191520442889918, 0.8090169943749475,
  0.7986355100472928, 0.7880107536067219, 0.7771459614569708, 0.766044443118978,
  0.7547095802227719, 0.7431448254773942, 0.7313537016191705,
  0.7193398003386511, 0.7071067811865475, 0.6946583704589973,
  0.6819983600624985, 0.6691306063588582, 0.6560590289905073,
  0.6427876096865393, 0.6293203910498375, 0.6156614753256583,
  0.6018150231520483, 0.5877852522924731, 0.573576436351046, 0.5591929034707468,
  0.544639035015027, 0.5299192642332049, 0.5150380749100542,
  0.49999999999999994, 0.48480962024633706, 0.4694715627858908,
  0.45399049973954675, 0.4383711467890774, 0.42261826174069944,
  0.40673664307580015, 0.3907311284892737, 0.374606593415912,
  0.35836794954530027, 0.3420201433256687, 0.3255681544571567,
  0.3090169943749474, 0.2923717047227367, 0.27563735581699916,
  0.25881904510252074, 0.24192189559966773, 0.22495105434386498,
  0.20791169081775931, 0.1908089953765448, 0.17364817766693033,
  0.15643446504023087, 0.13917310096006544, 0.12186934340514748,
  0.10452846326765346, 0.08715574274765817, 0.0697564737441253,
  0.05233595624294383, 0.03489949670250097, 0.01745240643728351, 0.0,
]

export default class MarsLander {
  pos: Position = { x: 0, y: 0 }
  fuel: number = 0 // the quantity of remaining fuel in liters.
  hSpeed: number = 0 // the horizontal speed (in m/s), can be negative.
  vSpeed: number = 0 // the vertical speed (in m/s), can be negative.
  rotate: number = 0 // the rotation angle in degrees (-90 to 90).
  power: number = 0 // the thrust power (0 to 4).
  positions: Position[] = []
  // for log
  hSpeeds: number[] = []
  vSpeeds: number[] = []
  rotates: number[] = []

  constructor(
    initialPos: Position,
    hSpeed = 0,
    vSpeed = 0,
    fuel = 1000,
    rotate = 0
  ) {
    this.pos = initialPos
    this.hSpeed = hSpeed
    this.vSpeed = vSpeed
    this.fuel = fuel
    this.rotate = rotate
  }

  update(rotate: number, power: number) {
    this.updateRotate(rotate)
    this.updatePower(power)
    this.updatePositionAndSpeed()
  }

  updateRotate(requestedRotate: number) {
    const rotation = Math.min(Math.max(requestedRotate, -15), 15)

    if (this.rotate != requestedRotate) {
      this.rotate = Math.min(Math.max(this.rotate + rotation, -90), 90)
    }

    this.rotates.push(this.rotate)
  }
  updatePower(requestedPower) {
    this.power =
      this.power === requestedPower
        ? this.power
        : this.power + (requestedPower > this.power ? +1 : -1)
  }
  updateFuel() {}
  updatePositionAndSpeed() {
    const absoluteRotate = Math.abs(this.rotate)

    const powerVectorX =
      cos[absoluteRotate] * this.power * (this.rotate < 0 ? 1 : -1)
    const powerVectorY = sin[absoluteRotate] * this.power

    const newVSpeed = this.vSpeed + MARS_GRAVITY + powerVectorY
    const newHSpeed = this.hSpeed + powerVectorX

    const yMove = this.vSpeed + (MARS_GRAVITY + powerVectorY) * 0.5
    const xMove = this.hSpeed + powerVectorX * 0.5

    const newPosY = this.pos.y + yMove
    const newPosX = this.pos.x + xMove

    this.pos.y = newPosY
    this.pos.x = newPosX

    this.positions.push({ x: newPosX, y: newPosY })

    this.vSpeed = newVSpeed
    this.hSpeed = newHSpeed

    this.hSpeeds.push(newHSpeed)
    this.vSpeeds.push(newVSpeed)
  }

  /**
   * Return true si
   * - atterrir dans une position verticale (angle = 0°)
   * - la vitesse verticale doit être limitée ( ≤ 40 m/s en valeur absolue)
   * - la vitesse horizontale doit être limitée ( ≤ 20 m/s en valeur absolue)
   */
  landedWell(): boolean {
    return (
      this.rotate === 0 &&
      Math.abs(this.vSpeed) <= 40 &&
      Math.abs(this.hSpeed) <= 20
    )
  }
}
